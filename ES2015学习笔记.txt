ES2015书籍学习笔记
第二章：

1. 语法糖
2. 模块化

第三章：语法详解

1. let，const和块级作用域
1.1 块级作用域
1.1.1 在ES2015之前没有块级左右域，只有全局作用域和函数作用域。
1.1.2 在函数中声明一个变量或者定量就会在函数中形成一个函数作用域，如果不做相应地延伸（进行闭包处理就会因为垃圾回收的机制进行销毁）
      就无法用到函数体内声明的变量。
1.2 let定义变量
1.2.1 let不能改变已经定义的值在“同一作用域”中，而var能改变var已经定义的变量。
1.2.2 在for循环中var和let的区别及：用var定义时会出现其作用域混乱就会导致for循环体内不能调用函数值，
      而let是作用域块级作用域，所以当每次执行会保留数值和引用。
1.3 const定义变量
1.3.1 与let和var不同点在于const会创建一与内存绑定之间不能改变的关系即：这个变量只能存在于这个地址之中
      但在某些情况下，并非值不可变。
1.3.2 在定义对象或数组时由于其定义的时候会将数组的内容或者对象的内容分割为若干个，而且有的浏览器会以堆的形式对内容进行存储
      所以在这种情况下会出现const定义的定量会改变。
1.3.3 那么在出现这种情况下则需要配合object.freeze()方法来固定数组和对象里元素的地址绑定。
1.3.4 const也会产生块级作用域
1.4 变量的生命周期
1.4.1 绝大多数的ECMAscript引擎对垃圾数据回收对视基于对变量或常量的引用进行统计，当一个变量被全部解除时引擎便会认定其会被清除
      简单地表示就是：一个事物为人所需要时，变会永垂不朽；但若被抛弃时便会悄然离去。
1.4.2 当想要一个东西像舔狗一样一直都在不管要不要都能够在第一时间能得到利用这该怎么办呢，那就得用闭包了。
1.4.3 什么是闭包呢简单从结构上来看就分为两块即：你要用到的那一块的声明的参数（舔狗本身），再一块就是引出用到那一块的函数（吸引舔狗的魅力）
      当你没定义引用声明参数的函数即function obj（）{return x；}时其就暂时不能构成闭包，这样在外部也不能引用函数的体内声明的变量了（其实
      闭包可以说就是将函数体内的变量定义的块级作用域变成了全局作用域，但得用引出函数来调用）
1.4.4 例子：var a = 1;			       |*在引擎进入作用域时会首先扫描let，const，var定义的变量
	  function getMes(){                     |并先将变量名定为空，再到赋值才会将值赋给定义的变量
	  console.log(a); 			 |//最后的结果是：ReferenceError
	  var a = 3；				|/而在以前ES版本用var来声明会出现undefined即未定义
	  }					 |为什么会这样呢就是因为先扫描的是声明变量名
	  					 |其执行过程：先寻找let let a = null => console.log(a) => var会显示undefined  
	  					 |let会显示ReferenceError => a = 3 =>结束运行函数
	  我们变成这样就行了：
	  function getMes(){					 |	
	  let a = 3;							 |
	  console.log(a);						 |//这样打印的就是a的值了
	  }										 |其执行过程是：先寻找let let => let a = null => a = 3 => console.log(a) => 3 =>结束运行函数
1.5更佳体验
1.5.1 let的作用就是用来代替var的，以后能不用var尽量不用var ，在ES2015中遵从三条例：
		1.一般情况下，使用const来定义值的储存容器（即：定义常量用const）;
		2.只有在容器中明确地确定将会被改变才使用let来定义变量（即：定义变量用let）;
		3.不再使用var.
1.5.2 let,const和循环语句
		1.由于在ES2015前没有块级作用域所以得用forEach方法来保证（）中定义的变量能被调用
		  而现在因为有了块作用域let和const所以不用forEach来保障了；
		2.当用const来定义数组或者对象为常量时，可以用entries来将每个元素形成新的数组如：
			const a = ['html', 'javascript'，'CSS'];
			console.log(a.entris()); // =>显示的值为[[0, 'html'], [1, 'javascript'], [2, 'CSS']]
